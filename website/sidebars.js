function getApiItems(label, source, types) {
  return [
    {
      type: 'category',
      label,
      items: [
        `api/${source}/index`,
        ...types.map((type) => ({
          type: 'category',
          label: `${type[0].toUpperCase()}${type.slice(1)}`,
          items: [
            {
              type: 'autogenerated',
              dirName: `api/${source}/${type}`,
            },
          ],
        })),
      ],
    },
  ];
}

module.exports = {
  docsSidebar: [
    {
      type: 'category',
      label: 'Documentation',
      items: [
        'about',
        'getting-started',
        'known-issues',
        {
          type: 'category',
          label: 'Code Splitting',
          items: [
            'code-splitting/concepts',
            'code-splitting/usage',
            'code-splitting/glossary',
            'code-splitting/guide-async-chunks',
            'code-splitting/caching-versioning',
            'code-splitting/react-navigation',
            'code-splitting/code-push',
          ],
        },
        {
          type: 'category',
          label: 'Migration guides',
          items: ['migration-guides/repack-v1-to-v2'],
        },
      ],
    },
  ],
  configuration: [
    {
      type: 'category',
      label: 'Configuration',
      items: ['configuration/webpack-config'],
    },
    {
      type: 'category',
      label: 'Loaders',
      items: ['configuration/loaders/assets-loader'],
    },
    {
      type: 'category',
      label: 'Guides',
      items: ['configuration/guides/svg'],
    },
    {
      type: 'category',
      label: 'Functions',
      items: [
        'api/node/functions/getContext',
        'api/node/functions/getDevServerOptions',
        'api/node/functions/getEntry',
        'api/node/functions/getMode',
        'api/node/functions/getPlatform',
        'api/node/functions/getReactNativePath',
        'api/node/functions/isMinimizeEnabled',
        'api/node/functions/getInitializationEntries',
        'api/node/functions/getPublicPath',
        'api/node/functions/getResolveOptions',
      ].map((docId) => ({ type: 'ref', id: docId })),
    },
    {
      type: 'category',
      label: 'Webpack Plugins',
      items: [
        'api/node/classes/AssetsPlugin',
        'api/node/classes/DevServerPlugin',
        'api/node/classes/JavaScriptLooseModePlugin',
        'api/node/classes/LoggerPlugin',
        'api/node/classes/OutputPlugin',
        'api/node/classes/TargetPlugin',
      ].map((docId) => ({ type: 'ref', id: docId })),
    },
  ],
  reactNativeApi: getApiItems('React Native API', 'react-native', [
    'classes',
    'interfaces',
    'types',
  ]),
  nodeApi: getApiItems('Node API', 'node', [
    'classes',
    'functions',
    'interfaces',
    'variables',
  ]),
};
